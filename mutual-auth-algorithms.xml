<?xml version="1.0" encoding="US-ASCII" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3526 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3526.xml">
<!ENTITY RFC6090 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6090.xml">
<!ENTITY FIPS.180-2.2002 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml2/reference.FIPS.180-2.2002.xml">
<!-- ENTITY FIPS.186-3.2009 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml2/reference.FIPS.186-3.2009.xml" -->
<!ENTITY I-D.ietf-httpauth-mutual SYSTEM "mutual-auth-protocol-ref.xml">

<!-- entities for RFC requirement keywords -->
<!ENTITY MUST "MUST">
<!ENTITY MUST_NOT "MUST&nbsp;NOT">
<!ENTITY SHALL "SHALL">
<!ENTITY SHALL_NOT "SHALL&nbsp;NOT">
<!ENTITY REQUIRED "REQUIRED">
<!ENTITY SHOULD "SHOULD">
<!ENTITY SHOULD_NOT "SHOULD&nbsp;NOT">
<!ENTITY RECOMMENDED "RECOMMENDED">
<!ENTITY NOT_RECOMMENDED "NOT&nbsp;RECOMMENDED">
<!ENTITY OPTIONAL "OPTIONAL">
<!ENTITY MAY "MAY">

<!-- additional generic entities -->
<!ENTITY minus "&nbhy;">

<!-- core protocol entities -->
<!ENTITY _S_c1 "S_c1">
<!ENTITY _S_s1 "S_s1">
<!ENTITY _K_c1 "K_c1">
<!ENTITY _K_s1 "K_s1">
<!ENTITY _kc1 "kc1">
<!ENTITY _ks1 "ks1">
<!ENTITY _VK_c "VK_c">
<!ENTITY _VK_s "VK_s">
<!ENTITY _vkc "vkc">
<!ENTITY _vks "vks">

<!-- algorithm-specific entities -->
<!ENTITY _iso-kam3-dl-2048-sha256 "iso&nbhy;kam3&nbhy;dl&nbhy;2048&nbhy;sha256">
<!ENTITY _iso-kam3-dl-4096-sha512 "iso&nbhy;kam3&nbhy;dl&nbhy;4096&nbhy;sha512">
<!ENTITY _iso-kam3-ec-p256-sha256 "iso&nbhy;kam3&nbhy;ec&nbhy;p256&nbhy;sha256">
<!ENTITY _iso-kam3-ec-p521-sha512 "iso&nbhy;kam3&nbhy;ec&nbhy;p521&nbhy;sha512">

]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<!-- Comment out this before submission: 
     single hyphen below for submission, double hyphens for interim drafts 
     - >
<?rfc private='Interim Draft $Rev: 276 $ draft-ietf-httpauth-mutual-algo-03.0 (C) Yutaka Oiwa, et al.' ?>
<?rfc header='$Rev: 276 $' ?>
<?rfc footer='Interim Draft' ?>
<! - -->

<rfc category="exp" docName="draft-ietf-httpauth-mutual-algo-04" ipr="trust200902">

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <title abbrev="HTTP Mutual Authentication: algorithms">Mutual Authentication Protocol for HTTP: KAM3-based Cryptographic Algorithms</title>

    <author fullname="Yutaka Oiwa" initials="Y." surname="Oiwa">
      <organization abbrev="ITRI, AIST">National Institute of Advanced Industrial Science and Technology</organization>

      <address>
        <postal>
          <street>Information Technology Research Institute</street>
          <street>Tsukuba Central 1</street>
          <street>1-1-1 Umezono</street>
          <city>Tsukuba-shi</city><region>Ibaraki</region>
          <country>JP</country>
        </postal>

        <email>mutual-auth-contact-ml@aist.go.jp</email>
      </address>
    </author>

    <author fullname="Hajime Watanabe" initials="H." surname="Watanabe">
      <organization abbrev="ITRI, AIST">National Institute of Advanced Industrial Science and Technology</organization>
      <address>
        <postal>
          <street>Information Technology Research Institute</street>
          <street>Tsukuba Central 1</street>
          <street>1-1-1 Umezono</street>
          <city>Tsukuba-shi</city><region>Ibaraki</region>
          <country>JP</country>
        </postal>
      </address>
    </author>

    <author fullname="Hiromitsu Takagi" initials="H." surname="Takagi">
      <organization abbrev="ITRI, AIST">National Institute of Advanced Industrial Science and Technology</organization>
      <address>
        <postal>
          <street>Information Technology Research Institute</street>
          <street>Tsukuba Central 1</street>
          <street>1-1-1 Umezono</street>
          <city>Tsukuba-shi</city><region>Ibaraki</region>
          <country>JP</country>
        </postal>
      </address>
    </author>

    <author fullname="Kaoru Maeda" initials="K." surname="Maeda">
      <organization abbrev="Lepidum">Lepidum Co. Ltd.</organization>
      <address>
        <postal>
          <street>#602, Village Sasazuka 3</street>
	  <street>1-30-3 Sasazuka</street>
          <city>Shibuya-ku</city><region>Tokyo</region>
          <country>JP</country>
        </postal>
      </address>
    </author>

    <author fullname="Tatsuya Hayashi" initials="T." surname="Hayashi">
      <organization abbrev="Lepidum">Lepidum Co. Ltd.</organization>
      <address>
        <postal>
          <street>#602, Village Sasazuka 3</street>
	  <street>1-30-3 Sasazuka</street>
          <city>Shibuya-ku</city><region>Tokyo</region>
          <country>JP</country>
        </postal>
      </address>
    </author>

    <author fullname="Yuichi Ioku" initials="Y." surname="Ioku">
      <organization abbrev="Individual">Individual</organization>
    </author>

    <date /> <!-- year="2011" /> -->

    <!-- Meta-data Declarations -->

    <area>Security</area>
    <workgroup>HTTPAUTH Working Group</workgroup>

    <keyword>HTTP, authentication</keyword>

    <abstract>
      <t>
   This document specifies some cryptographic algorithms which will be used
   for the Mutual user authentication method for the Hyper-text Transport Protocol (HTTP).</t>
    </abstract>
  </front>

<middle>

<section title="Introduction">

     <t>This document specifies some algorithms for <xref
     target="I-D.ietf-httpauth-mutual">Mutual authentication protocol
     for Hyper-Text Transport Protocol (HTTP)</xref>.
     The algorithms are based on so-called "Augmented Password-based
     Authenticated Key Exchange" (Augmented PAKE) techniques.
     In particular, 
     it uses one of three key exchange algorithm defined in the
     <xref target="ISO.11770-4.2006">ISO 11770-4: "Key management - Mechanisms based on weak secrets"</xref>
     as a basis.
     </t>

     <t>
       In very brief summary, the Mutual authentication protocol
       exchanges four values, &_K_c1;, &_K_s1;, &_VK_c; and &_VK_s;, to
       perform authenticated key exchanges, using the
       password-derived secret pi and its "augmented version" J(pi).
       This document defines the set of functions &_K_c1;, &_K_s1;,
       and J for a specific algorithm family.
     </t>

     <t>
       Please note that, from the view of cryptographic literature, the original
       functionality of Augmented PAKE is separated into the
       functions &_K_c1; and &_K_s1; defined in this draft, and the
       functions &_VK_c; and &_VK_s; defined in Section 11 of <xref
       target="I-D.ietf-httpauth-mutual"/> as "default functions".
       For the purpose of security analysis, please also refer to
       these functions.
     </t>

  <section title="Terminology">

    <t>The key words "&MUST;", "&MUST_NOT;", "&REQUIRED;", "&SHALL;", "&SHALL_NOT;",
        "&SHOULD;", "&SHOULD_NOT;", "&RECOMMENDED;", "&NOT_RECOMMENDED;", "&MAY;", and
        "&OPTIONAL;" in this document are to be interpreted as described
        in <xref target="RFC2119" />.</t>

    <!-- t>See <xref target="RFC4949" /> for security-related terms -->

    <t>The term "natural numbers" refers to the non-negative integers (including zero) throughout this document.</t>
    <t>This document treats target (codomain) of hash functions to be octet strings.  The notation INT(H(s)) gives a natural-number output of hash function H applied to string s.</t>
  </section>

</section>

<section title="Cryptographic Overview (Non-normative)">
<t>
The cryptographic primitive used in this algorithm specification is
based on a variant of augmented PAKE proposed by T. Kwon, called APKAS-AMP, originally submitted to IEEE P1363.2.
The general flow of the successful exchange is shown below, for informative purposes only.
The DL-based notations are used, and all group operations (mod q and mod r) are omitted.
</t>
<t>
Note that the only messages corresponding to the earlier two exchanges are defined in this specification.
Those for latter two exchanges are defined in the main specification <xref target="I-D.ietf-httpauth-mutual" />.
</t>
<figure>
<artwork><![CDATA[
   C: S_c1 = random
   C: K_c1 = g^(S_c1)
                    ----- ID, K_c1 ----->
   C: t_1 = H1(K_c1)                S: t_1 = H1(K_c1)
                                    S: fetch J = g^pi by ID
                                    S: S_s1 = random
                                    S: K_s1 = (J * K_c1^(t_1))^(S_s1)
                    <----- K_s1 -----
   C: t_2 = H2(K_c1, K_s1)          S: t_2 = H2(K_c1, K_s1)
   C: z = K_s1^((S_c1 + t_2) / (S_c1 * t_1 + pi))
                                    S: z' = (K_c1 * g^(t_2))^(S_s1)
   (assumption at this point: z = z' if authentication succeeded)

   C: VK_c = H4(K_c1, K_s1, z)      S: VK_c' = H4(K_c1, K_s1, z')
                    ----- VK_c ------->
                                    S: assert(VK_c = VK_c')

   C: VK_s' = H3(K_c1, K_s1, z)     S: VK_s = H3(K_c1, K_s1, z')
                    <----- VK_s ------
   C: assert(VK_s = VK_s')]]>
</artwork></figure>
</section>


<section title="Authentication Algorithms" anchor="algorithm">

<t>
This document specifies only one family of the authentication
algorithm.  The family consists of four authentication algorithms,
which only differ in their underlying mathematical groups and security
parameters.  The algorithms do not add any additional parameters.  The
tokens for these algorithms are
<list style="symbols">
 <t> &_iso-kam3-dl-2048-sha256;: for the 2048-bit discrete-logarithm setting with the SHA-256 hash function.</t>
 <t> &_iso-kam3-dl-4096-sha512;: for the 4096-bit discrete-logarithm setting with the SHA-512 hash function.</t>
 <t> &_iso-kam3-ec-p256-sha256;: for the 256-bit prime-field elliptic-curve setting with the SHA-256 hash function.</t>
 <t> &_iso-kam3-ec-p521-sha512;: for the 521-bit prime-field elliptic-curve setting with the SHA-512 hash function.</t>
</list>
</t>

<t>
For discrete-logarithm settings, the underlying groups are the 2048-bit
and 4096-bit MODP groups defined in <xref target="RFC3526" />, respectively.
See <xref target="modp-groups" /> for the exact specifications of the groups
and associated parameters.
The hash functions H are SHA-256 for the
2048-bit group and SHA-512 for the 4096-bit group, respectively, defined in <xref target="FIPS.180-2.2002">FIPS PUB 180-2</xref>.
The hash iteration count nIterPi is 16384.
The representation of the parameters &_kc1;, &_ks1;, &_vkc;, and &_vks; is base64-fixed-number.
</t>

<t>
For the elliptic-curve settings, the underlying groups are the elliptic curves over the prime
fields P&nbhy;256 and P&nbhy;521, respectively, specified in the appendix&nbsp;D.1.2 of <xref target="FIPS.186-4.2013">FIPS PUB 186-4</xref>
specification.  The hash functions H, which are referenced by the core document, are SHA-256 for the P&nbhy;256 curve and
SHA-512 for the P&nbhy;521 curve, respectively.
Cofactors of these curves are 1.
The hash iteration count nIterPi is 16384.
The representation of the parameters &_kc1;, &_ks1;, &_vkc;, and &_vks; is hex-fixed-number.
</t>

<t>
Note: This algorithm is based on the Key Agreement Mechanism 3 (KAM3) defined in Section 6.3 of
<xref target="ISO.11770-4.2006">ISO/IEC 11770-4</xref> with a few modifications/improvements.
However, implementers should use this document as the normative reference, because the algorithm
has been changed in several minor details as well as major improvements.
</t>

<section title="Support Functions and Notations">

<t>The algorithm definitions use several support functions and notations defined below:</t>

<t>The integers in the specification are in decimal, or in hexadecimal when prefixed with "0x".</t>

<t>The functions named octet(), OCTETS(), and INT() are those defined in the <xref target="I-D.ietf-httpauth-mutual">core specification</xref>.</t>

<t>Note:
The definition of OCTETS() is different from the function
GE2OS_x in the original ISO specification, which takes
the shortest representation without preceding zeros.
</t>

<t>All of the algorithms defined in this specification use the default functions defined in the core specification (defined in Section 11 of <xref target="I-D.ietf-httpauth-mutual" />)
for computing the values pi, &_VK_c; and &_VK_s;.</t>

</section>

<section title="Functions for Discrete-Logarithm Settings">

<t>
In this section, an equation (x / y mod z) denotes a natural number w less than z that satisfies
(w * y) mod z = x mod z.
</t>

<t>
For the discrete-logarithm, we refer to some of the domain parameters
by using the following symbols:

<list style="symbols">
<t>q: for "the prime" defining the MODP group.</t>
<t>g: for "the generator" associated with the group.</t>
<t>r: for the order of the subgroup generated by g.</t>
</list>
</t>

<t>
The function J is defined as
</t>

<t>
J(pi) = g^(pi) mod q.
</t>

<t>
The value of &_K_c1; is derived as 
</t>

<t>
&_K_c1; = g^(&_S_c1;) mod q,
</t>

<t>
where &_S_c1; is a random integer within range [1, r&minus;1]
and r is the size of the subgroup generated by g.
In addition, &_S_c1; &MUST; be larger than log(q)/log(g) 
(so that g^(&_S_c1;) > q).
</t>

<t>
The value of &_K_c1; &SHALL; satisfy 1 &lt; &_K_c1; &lt; q&minus;1.
The server &MUST; check this condition upon reception.
</t>

<t>
Let an intermediate value t_1 be
</t>

<t>
t_1 = INT(H(octet(1) | OCTETS(&_K_c1;))),
</t>

<t>
the value of &_K_s1; is derived from J(pi) and &_K_c1; as:
</t>

<t>
&_K_s1; = (J(pi) * &_K_c1;^(t_1))^(&_S_s1;) mod q
</t>

<t>
where &_S_s1; is a random number within range [1, r&minus;1].
The value of &_K_s1; &MUST; satisfy 1 &lt; &_K_s1; &lt; q&minus;1.
If this condition is not held, the server &MUST; reject the exchange.
The client &MUST; check this condition upon reception.
</t>

<t>
Let an intermediate value t_2 be
</t>

<t>
t_2 = INT(H(octet(2) | OCTETS(&_K_c1;) | OCTETS(&_K_s1;))),
</t>

<t>
the value z on the client side is derived by the following equation:
</t>

<t>
z = &_K_s1;^((&_S_c1; + t_2) / (&_S_c1; * t_1 + pi) mod r) mod q.
</t>

<t>
The value z on the server side is derived by the following equation:
</t>

<t>
z = (&_K_c1; * g^(t_2))^(&_S_s1;) mod q.
</t>

<t>
(Note: the original ISO specification contained a message pair
containing verification of value z along with the "transcript" of the
protocol exchange.  The functionality of this kind is contained in the
functions &_VK_c; and &_VK_s;.)</t>
</section>

<section title="Functions for Elliptic-Curve Settings">

<t>
For the elliptic-curve setting, we refer to some of the domain parameters
by the following symbols:

<list style="symbols">
<t>q: for the prime used to define the group.</t>
<t>G: for the defined point called the generator.</t>
<t>h: for the cofactor of the group.</t>
<t>r: for the order of the subgroup generated by G.</t>
</list>
</t>

<t>
The function P(p) converts a curve point p into an integer representing point p,
by computing x * 2 + (y mod 2), where (x, y) are the coordinates of point p.
P'(z) is the inverse of function P, that is, it converts an integer z
to a point p that satisfies P(p) = z.  If such p exists, it is
uniquely defined.  Otherwise, z does not represent a valid curve point.
</t>
<t>
The operator + indicates the elliptic-curve group operation, and
the operation [x] * p denotes an integer-multiplication of point p:
it calculates p + p + ... (x times) ... + p.
See the literature on elliptic-curve cryptography for the exact algorithms used for those functions
(e.g. Section 3 of <xref target="RFC6090" />, which uses different notations, though.)
0_E represents the infinity point.
The equation (x / y mod z) denotes a natural number w less than z that satisfies
(w * y) mod z = x mod z.
</t>

<t>
The function J is defined as
</t>

<t>
J(pi) = [pi] * G.
</t>

<t>
The value of &_K_c1; is derived as 
</t>

<t>
&_K_c1; = P(&_K_c1;'), where &_K_c1;' = [&_S_c1;] * G,
</t>

<t>
where &_S_c1; is a random number within range [1, r&minus;1].
The value of &_K_c1; &MUST; represent a valid curve point, and
[h] * &_K_c1;' &SHALL_NOT; be 0_E.  The
server &MUST; check this condition upon reception.
</t>

<t>
Let an intermediate integer t_1 be
</t>

<t>
t_1 = INT(H(octet(1) | OCTETS(&_K_c1;))),
</t>

<t>
the value of &_K_s1; is derived from J(pi) and &_K_c1;' = P'(&_K_c1;) as:
</t>

<t>
&_K_s1; = P([&_S_s1;] * (J(pi) + [t_1] * &_K_c1;')),
</t>

<t>
where &_S_s1; is a random number within range [1, r&minus;1].
The value of &_K_s1; &MUST; represent a valid curve point and 
satisfy [h] * P'(&_K_s1;) &lt;&gt; 0_E.
If this condition is not satisfied, the server &MUST; reject the exchange.
The client &MUST; check this condition upon reception.
</t>

<t>
Let an intermediate integer t_2 be
</t>

<t>
t_2 = INT(H(octet(2) | OCTETS(&_K_c1;) | OCTETS(&_K_s1;))),
</t>

<t>
the value z on the client side is derived by the following equation:
</t>

<t>
z = P([(&_S_c1; + t_2) / (&_S_c1; * t_1 + pi) mod r] * P'(&_K_s1;)).
</t>

<t>
The value z on the server side is derived by the following equation:
</t>

<t>
z = P([&_S_s1;] * (P'(&_K_c1;) + [t_2] * G)).
</t>

</section>

</section>


<section anchor="IANA" title="IANA Considerations">
<t>
This document defines four new tokens to be added for
"HTTP Mutual authentication algorithms" registry;
&_iso-kam3-dl-2048-sha256;, &_iso-kam3-dl-4096-sha512;, &_iso-kam3-ec-p256-sha256; and
&_iso-kam3-ec-p521-sha512;, as follows:
</t>
<texttable>
<ttcol>Token</ttcol><ttcol>Description</ttcol><ttcol>Specification</ttcol>
<c>&_iso-kam3-dl-2048-sha256;</c><c>ISO-11770-4 KAM3, 2048-bit DL</c><c>This document</c>
<c>&_iso-kam3-dl-4096-sha512;</c><c>ISO-11770-4 KAM3, 4096-bit DL</c><c>This document</c>
<c>&_iso-kam3-ec-p256-sha256;</c><c>ISO-11770-4 KAM3, 256-bit EC</c><c>This document</c>
<c>&_iso-kam3-ec-p521-sha512;</c><c>ISO-11770-4 KAM3, 521-bit EC</c><c>This document</c>
</texttable>

</section>

<section anchor="Security" title="Security Considerations">

<t>
Refer the corresponding section of the core specification for
algorithm-independent, generic considerations, too.
</t>

<section title="General Implementation Considerations">
<t>
<list style="symbols">
<t>During the exchange, the value VK_s, defined in <xref target="I-D.ietf-httpauth-mutual" />, &MUST; only be sent
when the server has received a correct (expected) value of VK_c.  This is a requirement from underlying cryptography stated in <xref target="ISO.11770-4.2006" />.</t>
<t>All random numbers used in these algorithms &MUST; be at least cryptographically computationally secure against forward and backward guessing attacks.</t>
<t>Computation times of all numerical operations on discrete-logarithm group elements and elliptic-curve points &MUST; be normalized and made independent of the exact values, to prevent timing-based side-channel attacks.</t>
</list>
</t>

</section>

<section title="Cryptographic Assumptions and Considerations">
<t>
The notices on this subsection is mostly for those who analyze the security of this algorithm, and those who might want to make a derived work of this algorithm specification.
</t>
<t>
<list style="symbols">
<t>
Handling of invalid &_K_s1; value in the exchange (now: to reject the exchange) has been changed from original ISO specification (original: to retry with another random &_S_s1; value). This is due to an observation that this condition is less likely from the random error caused by unlucky choice of &_S_s1;, but more likely from the systematic failure from invalid J(pi) value, even implying possible denial-of-service attacks.
</t>
<t>
The usual construction of authenticated key exchange
algorithms are build from a key-exchange period and a
key verification period, and the latter usually involving
some kind of exchange transaction to be verified, to avoid
security risks or vulnerabilities caused from mixing of 
values from two or more key exchanges.
In the design of the algorithms in this document,
such a functionality is defined in generalized manner
in the core specification <xref target="I-D.ietf-httpauth-mutual" />
(see definitions of &_VK_c; and &_VK_s;).
If any attempts to reuse the algorithm defined above with any other protocols exist,
care &MUST; be taken on that aspect.
</t>
<t>
The domain parameters chosen and specified in this draft has a few assumptions.
In the DL setting, q has to be safe prime ([(q - 1) / 2] must also be prime), and r should be the largest possible value [(q - 1) / 2].
In the EC setting, r has to be prime.
Defining a variation of this algorithm using a different domain parameter &SHOULD; care about these conditions.
</t>
</list>
</t>

</section>
</section>

<section title="Notice on intellectual properties">

<t>
The National Institute of Advanced Industrial Science and Technology (AIST) and
Yahoo! Japan, Inc. has jointly submitted a patent application on the
protocol proposed in this documentation to the Patent Office of Japan.
The patent is intended to be open to any implementers of this protocol
and its variants under non-exclusive royalty-free manner.
For the details of the patent application and its status, please contact the author of this document.
</t>

<t>
The elliptic-curve based authentication algorithms might involve several
existing third-party patents.  The authors of the document take no
position regarding the validity or scope of such patents, and other patents
as well.
</t>

</section>

</middle>


  <!--  *****BACK MATTER ***** -->


  <back>

    <references title="Normative References">
      &RFC2119;
      &RFC3526;
      &FIPS.180-2.2002;

      <!-- &FIPS.186-3.2009; -->

      <reference anchor="FIPS.186-4.2013" target="http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf">
        <front>
          <title>Digital Signature Standard (DSS)</title>

          <author>
            <organization>National Institute of Standards and Technology</organization>
          </author>

          <date year="2013" month="July" />
        </front>
	<seriesInfo name="FIPS" value="PUB 186-4" />
      </reference>

      &I-D.ietf-httpauth-mutual;
    </references>

    <references title="Informative References">

      <reference anchor="ISO.11770-4.2006">
        <front>
          <title>Information technology &ndash; Security techniques &ndash; Key management &ndash; Part 4: Mechanisms based on weak secrets</title>
          <author>
            <organization>International Organization for Standardization</organization>
          </author>
          <date year="2006" month="May" />
        </front>
	<seriesInfo name="ISO" value="Standard 11770-4" />
      </reference>

      &RFC6090;

    </references>

<section anchor="modp-groups" title="(Informative) Group Parameters for Discrete-Logarithm Based Algorithms">

<t>The MODP group used for the &_iso-kam3-dl-2048-sha256; algorithm is defined by the following parameters.</t>

<t>The prime is:</t>

<figure>
<artwork>
 q = 0xFFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1
       29024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD
       EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245
       E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED
       EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3D
       C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F
       83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D
       670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B
       E39E772C 180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9
       DE2BCBF6 95581718 3995497C EA956AE5 15D22618 98FA0510
       15728E5A 8AACAA68 FFFFFFFF FFFFFFFF.
</artwork>
</figure>

<t>The generator is:</t>

<figure>
<artwork>
 g = 2.
</artwork>
</figure>

<t>The size of the subgroup generated by g is:</t>

<figure>
<artwork>
 r = (q - 1) / 2 =
     0x7FFFFFFF FFFFFFFF E487ED51 10B4611A 62633145 C06E0E68
       94812704 4533E63A 0105DF53 1D89CD91 28A5043C C71A026E
       F7CA8CD9 E69D218D 98158536 F92F8A1B A7F09AB6 B6A8E122
       F242DABB 312F3F63 7A262174 D31BF6B5 85FFAE5B 7A035BF6
       F71C35FD AD44CFD2 D74F9208 BE258FF3 24943328 F6722D9E
       E1003E5C 50B1DF82 CC6D241B 0E2AE9CD 348B1FD4 7E9267AF
       C1B2AE91 EE51D6CB 0E3179AB 1042A95D CF6A9483 B84B4B36
       B3861AA7 255E4C02 78BA3604 650C10BE 19482F23 171B671D
       F1CF3B96 0C074301 CD93C1D1 7603D147 DAE2AEF8 37A62964
       EF15E5FB 4AAC0B8C 1CCAA4BE 754AB572 8AE9130C 4C7D0288
       0AB9472D 45565534 7FFFFFFF FFFFFFFF.
</artwork>
</figure>

    <t>The MODP group used for the &_iso-kam3-dl-4096-sha512; algorithm is defined by the following parameters.</t>

<t>The prime is:</t>

<figure>
<artwork>
 q = 0xFFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1
       29024E08 8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD
       EF9519B3 CD3A431B 302B0A6D F25F1437 4FE1356D 6D51C245
       E485B576 625E7EC6 F44C42E9 A637ED6B 0BFF5CB6 F406B7ED
       EE386BFB 5A899FA5 AE9F2411 7C4B1FE6 49286651 ECE45B3D
       C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8 FD24CF5F
       83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D
       670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B
       E39E772C 180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9
       DE2BCBF6 95581718 3995497C EA956AE5 15D22618 98FA0510
       15728E5A 8AAAC42D AD33170D 04507A33 A85521AB DF1CBA64
       ECFB8504 58DBEF0A 8AEA7157 5D060C7D B3970F85 A6E1E4C7
       ABF5AE8C DB0933D7 1E8C94E0 4A25619D CEE3D226 1AD2EE6B
       F12FFA06 D98A0864 D8760273 3EC86A64 521F2B18 177B200C
       BBE11757 7A615D6C 770988C0 BAD946E2 08E24FA0 74E5AB31
       43DB5BFC E0FD108E 4B82D120 A9210801 1A723C12 A787E6D7
       88719A10 BDBA5B26 99C32718 6AF4E23C 1A946834 B6150BDA
       2583E9CA 2AD44CE8 DBBBC2DB 04DE8EF9 2E8EFC14 1FBECAA6
       287C5947 4E6BC05D 99B2964F A090C3A2 233BA186 515BE7ED
       1F612970 CEE2D7AF B81BDD76 2170481C D0069127 D5B05AA9
       93B4EA98 8D8FDDC1 86FFB7DC 90A6C08F 4DF435C9 34063199
       FFFFFFFF FFFFFFFF.
</artwork>
</figure>

<t>The generator is:</t>

<figure>
<artwork>
 g = 2.
</artwork>
</figure>

<t>The size of the subgroup generated by g is:</t>

<figure>
<artwork>
 r = (q - 1) / 2 =
     0x7FFFFFFF FFFFFFFF E487ED51 10B4611A 62633145 C06E0E68
       94812704 4533E63A 0105DF53 1D89CD91 28A5043C C71A026E
       F7CA8CD9 E69D218D 98158536 F92F8A1B A7F09AB6 B6A8E122
       F242DABB 312F3F63 7A262174 D31BF6B5 85FFAE5B 7A035BF6
       F71C35FD AD44CFD2 D74F9208 BE258FF3 24943328 F6722D9E
       E1003E5C 50B1DF82 CC6D241B 0E2AE9CD 348B1FD4 7E9267AF
       C1B2AE91 EE51D6CB 0E3179AB 1042A95D CF6A9483 B84B4B36
       B3861AA7 255E4C02 78BA3604 650C10BE 19482F23 171B671D
       F1CF3B96 0C074301 CD93C1D1 7603D147 DAE2AEF8 37A62964
       EF15E5FB 4AAC0B8C 1CCAA4BE 754AB572 8AE9130C 4C7D0288
       0AB9472D 45556216 D6998B86 82283D19 D42A90D5 EF8E5D32
       767DC282 2C6DF785 457538AB AE83063E D9CB87C2 D370F263
       D5FAD746 6D8499EB 8F464A70 2512B0CE E771E913 0D697735
       F897FD03 6CC50432 6C3B0139 9F643532 290F958C 0BBD9006
       5DF08BAB BD30AEB6 3B84C460 5D6CA371 047127D0 3A72D598
       A1EDADFE 707E8847 25C16890 54908400 8D391E09 53C3F36B
       C438CD08 5EDD2D93 4CE1938C 357A711E 0D4A341A 5B0A85ED
       12C1F4E5 156A2674 6DDDE16D 826F477C 97477E0A 0FDF6553
       143E2CA3 A735E02E CCD94B27 D04861D1 119DD0C3 28ADF3F6
       8FB094B8 67716BD7 DC0DEEBB 10B8240E 68034893 EAD82D54
       C9DA754C 46C7EEE0 C37FDBEE 48536047 A6FA1AE4 9A0318CC
       FFFFFFFF FFFFFFFF.
</artwork>
</figure>

    </section>

    <section anchor="other-values" title="(Informative) Derived Numerical Values">
    <t>
    This section provides several numerical values for implementing this protocol,
    derived from the above specifications.
    The values shown in this section are for informative purposes only.
    </t>

    <texttable>
    <ttcol></ttcol>
    <ttcol>dl&nbhy;2048</ttcol>
    <ttcol>dl&nbhy;4096</ttcol>
    <ttcol>ec&nbhy;p256</ttcol>
    <ttcol>ec&nbhy;p521</ttcol>
    <ttcol></ttcol>

    <c>Size of &_K_c1; etc.</c>
    <c>2048</c>
    <c>4096</c>
    <c>257</c>
    <c>522</c>
    <c>(bits)</c>

    <c>hSize, Size of H(...)</c>
    <c>256</c>
    <c>512</c>
    <c>256</c>
    <c>512</c>
    <c>(bits)</c>

    <c>length of OCTETS(&_K_c1;) etc.</c>
    <c>256</c>
    <c>512</c>
    <c>33</c>
    <c>66</c>
    <c>(octets)</c>
    
    <c>length of &_kc1;, &_ks1; param. values.</c>
    <c>344 *</c>
    <c>684 *</c>
    <c>66</c>
    <c>132</c>
    <c>(octets)</c>

    <c>length of &_vkc;, &_vks; param. values.</c>
    <c>44 *</c>
    <c>88 *</c>
    <c>64</c>
    <c>128</c>
    <c>(octets)</c>

    <c>minimum allowed &_S_c1;</c>
    <c>2048</c>
    <c>4096</c>
    <c>1</c>
    <c>1</c>
    <c></c>
    </texttable>

    <t>(The numbers marked with an * do not include any enclosing quotation marks.)</t>

    </section>

    <section anchor="changelog" title="(Informative) Draft Change Log">
      <section title="Changes in HTTPAUTH-WG revision 04">
        <t>
	  <list style="symbols">
	    <t>Authors address updated.</t>
	  </list>
        </t>
      </section>
      <section title="Changes in HTTPAUTH-WG revision 03">
        <t>
	  <list style="symbols">
	    <t>IANA registration information added.</t>
	  </list>
        </t>
      </section>
      <section title="Changes in HTTPAUTH-WG revision 02">
        <t>
	  <list style="symbols">
	    <t>No technical changes: references updated.</t>
	  </list>
        </t>
      </section>
      <section title="Changes in HTTPAUTH-WG revision 01">
        <t>
	  <list style="symbols">
	    <t>Changed behavior on failed generation of &_K_s1;.</t>
	    <t>Security considerations updated.</t>
	  </list>
        </t>
      </section>
      <section title="Changes in HTTPAUTH-WG revision 00">
        <t>
	  <list style="symbols">
	    <t>Added a note on the choice of elliptic curves.</t>
	  </list>
        </t>
      </section>
      <section title="Changes in HTTPAUTH revision 02">
        <t>
	  <list style="symbols">
	    <t>Added nIterPi parameter to adjust to the changes to the core draft.</t>
	    <t>Added a note on the verification of exchange transaction.</t>
	  </list>
        </t>
      </section>
      <section title="Changes in HTTPAUTH revision 01">
        <t>
	  <list style="symbols">
	    <t>Notation change: integer output of hash function will be notated as INT(H(*)), changed from H(*).</t>
	  </list>
        </t>
      </section>
      <section title="Changes in revision 02">
        <t>
	  <list style="symbols">
	    <t> Implementation hints in appendix changed (number of characters for base64-fixed-number does not contain double-quotes).</t>
	  </list>
        </t>
      </section>
      <section title="Changes in revision 01">
        <t>
	  <list style="symbols">
	    <t> Parameter names renamed.</t>
	    <t> Some expressions clarified without changing the value.</t>
	  </list>
        </t>
      </section>
      <section title="Changes in revision 00">
        <t>
	The document is separated from the revision 08 of the core documentation.
        </t>
      </section>
    </section>

  </back>
</rfc>

<!--  LocalWords:  interoperability cryptographically
 -->
